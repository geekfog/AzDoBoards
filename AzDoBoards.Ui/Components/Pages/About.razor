@page "/about"
@using System.Security.Claims
@using AzDoBoards.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Client
@using MudBlazor
@using System.Reflection
@inject IServiceProvider ServiceProvider

<PageTitle>About</PageTitle>

<div class="page-content-full-width mt-4">
    <h1>About</h1>

    <div class="mb-4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2"><strong>Version:</strong> @AssemblyVersion</MudText>
            </MudCardContent>
        </MudCard>
    </div>

    <MudAlert Severity="Severity.Info" Class="mb-4">
        <MudText Typo="Typo.body1">
            Having trouble with account authentication?
            <MudLink Href="/account-help" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Help" Size="Size.Small" Class="me-1" />
                View Account Selection Help
            </MudLink>
        </MudText>
    </MudAlert>

    <p>
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">@StatusMessage</MudAlert>
        }

        <h2>Authenticated User Information</h2>
        @if (User != null)
        {
            <div>
                <p><strong>User Identity:</strong> @User.Identity?.Name</p>
                <p><strong>Authenticated:</strong> @(User.Identity?.IsAuthenticated ?? false)</p>

                <h3>Claims:</h3>
                <MudDataGrid Items="UserClaimsList" Class="full-width">
                    <Columns>
                        <PropertyColumn Property="x => x.Type" Title="Claim" Sortable="true" />
                        <PropertyColumn Property="x => x.Value" Title="Value" Sortable="true" />
                    </Columns>
                </MudDataGrid>
            </div>
        }
        else
        {
            @if (isLoading)
            {
                <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" /> 
                    <MudText Typo="Typo.body2" Class="ml-2">Loading user data...</MudText>
                </MudStack>
            }
            else
            {
                <div>No user information found.</div>
            }
        }

        <h2>Redis Cache</h2>
        @if (RedisEntries != null && RedisEntries.Any())
        {
            <MudDataGrid Items="RedisEntries" Class="mud-table-custom full-width">
                <Columns>
                    <PropertyColumn Property="x => x.Key" Title="Key" Sortable="true" />
                    <PropertyColumn Property="x => x.Value" Title="Value" Sortable="true" />
                </Columns>
            </MudDataGrid>
        }
        else
        {
            @if (isLoading)
            {
                <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                    <MudText Typo="Typo.body2" Class="ml-2">Loading redis data...</MudText>
                </MudStack>
            }
            else
            {
                <div>No redis keys found.</div>
            }
        }
    </p>
</div>

@code {
    private bool isLoading = true;
    private string StatusMessage = string.Empty;
    private ClaimsPrincipal? User;
    private IEnumerable<string>? UserClaims;
    private List<string> RedisKeys = new();
    private Dictionary<string, string> RedisValues = new();
    private List<Claim> UserClaimsList = new();
    private List<RedisEntry> RedisEntries = new();

    // Assembly version properties
    private string AssemblyVersion = string.Empty;

    protected override void OnInitialized()
    {
        LoadAssemblyInfo();
        
        // Fire and forget - don't await
        _ = Task.Run(async () =>
        {
            try
            {
                await LoadAllDataAsync();
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private void LoadAssemblyInfo()
    {
        var assembly = Assembly.GetExecutingAssembly();
        AssemblyVersion = assembly.GetName().Version?.ToString() ?? "Unknown";       
    }

    private async Task LoadAllDataAsync()
    {
        try
        {
            // Lazy load services to avoid blocking component creation
            var authProvider = ServiceProvider.GetRequiredService<AuthenticationStateProvider>();
            var redis = ServiceProvider.GetRequiredService<StackExchange.Redis.IConnectionMultiplexer>();

            var authState = await authProvider.GetAuthenticationStateAsync();
            User = authState.User;
            UserClaims = User?.Claims.Select(c => $"{c.Type}: {c.Value}");
            UserClaimsList = User?.Claims.ToList() ?? new List<Claim>();

            await InvokeAsync(StateHasChanged); // Update UI with user info

            if (User == null || !(User.Identity?.IsAuthenticated ?? false))
            {
                AppendStatus("User is NOT authenticated.");
                return;
            }

            try
            {
                var db = redis.GetDatabase();
                var server = redis.GetServer(redis.GetEndPoints().First());
                RedisKeys = server.Keys().Select(k => k.ToString()).ToList();
                RedisEntries = new List<RedisEntry>();
                foreach (var key in RedisKeys)
                {
                    try
                    {
                        var value = await db.StringGetAsync(key);
                        RedisEntries.Add(new RedisEntry
                        {
                            Key = key,
                            Value = value.ToString()
                        });
                    }
                    catch (Exception)
                    {
                        RedisEntries.Add(new RedisEntry
                        {
                            Key = key,
                            Value = "(Unknown Object)"
                        });
                    }
                }
                await InvokeAsync(StateHasChanged); // Update UI with Redis data
            }
            catch (Exception ex)
            {
                AppendStatus($"Redis error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            AppendStatus($"Initialization error: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AppendStatus(string message)
    {
        if (!string.IsNullOrEmpty(StatusMessage)) StatusMessage += " | ";
        StatusMessage += message;
    }

    public class RedisEntry
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}