@page "/about"
@using System.Security.Claims
@using AzDoBoards.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Client
@using MudBlazor
@inject IServiceProvider ServiceProvider

<PageTitle>About</PageTitle>

<h1>About</h1>

<MudAlert Severity="Severity.Info" Class="mb-4">
    <MudText Typo="Typo.body1">
        Having trouble with account authentication?
        <MudLink Href="/account-help" Color="Color.Primary">
            <MudIcon Icon="Icons.Material.Filled.Help" Size="Size.Small" Class="me-1" />
            View Account Selection Help
        </MudLink>
    </MudText>
</MudAlert>

<p>
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <h3>Status</h3>
        <div>@StatusMessage</div>
    }

    <h3>Authenticated User Information</h3>
    @if (User != null)
    {
        <div>
            <strong>User Identity:</strong> @User.Identity?.Name
            <br />
            <strong>Authenticated:</strong> @(User.Identity?.IsAuthenticated ?? false)
            <br />
            <strong>Claims:</strong>
            <MudDataGrid Items="UserClaimsList">
                <Columns>
                    <PropertyColumn Property="x => x.Type" Title="Claim" Sortable="true" />
                    <PropertyColumn Property="x => x.Value" Title="Value" Sortable="true" />
                </Columns>
            </MudDataGrid>
        </div>
    }
    else
    {
        <div>@(isLoading ? "Loading User data..." : "No user information found.")</div>
    }

    <h3>Projects</h3>
    @if (Projects != null)
    {
        @foreach (var project in Projects)
        {
            <div>@project</div>
        }
    }
    else
    {
        <div>@(isLoading? "Loading Project data..." : "No project data found.")</div>
    }

    <h3>Redis Cache</h3>
    @if (RedisEntries != null && RedisEntries.Any())
    {
        <MudDataGrid Items="RedisEntries" Class="mud-table-custom">
            <Columns>
                <PropertyColumn Property="x => x.Key" Title="Key" Sortable="true" />
                <PropertyColumn Property="x => x.Value" Title="Value" Sortable="true" />
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <div>@(isLoading ? "Loading Redis data..." : "No Redis keys found.")</div>
    }
</p>

@code {
    private bool isLoading = true;
    private string StatusMessage = string.Empty;
    private ClaimsPrincipal? User;
    private IEnumerable<string>? UserClaims;
    private List<string>? Projects;
    private List<string> RedisKeys = new();
    private Dictionary<string, string> RedisValues = new();
    private List<Claim> UserClaimsList = new();
    private List<RedisEntry> RedisEntries = new();

    protected override void OnInitialized()
    {
        // Fire and forget - don't await
        _ = Task.Run(async () =>
        {
            try
            {
                await LoadAllDataAsync();
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task LoadAllDataAsync()
    {
        try
        {
            // Lazy load services to avoid blocking component creation
            var authProvider = ServiceProvider.GetRequiredService<AuthenticationStateProvider>();
            var projectClient = ServiceProvider.GetRequiredService<ProjectServices>();
            var redis = ServiceProvider.GetRequiredService<StackExchange.Redis.IConnectionMultiplexer>();

            var authState = await authProvider.GetAuthenticationStateAsync();
            User = authState.User;
            UserClaims = User?.Claims.Select(c => $"{c.Type}: {c.Value}");
            UserClaimsList = User?.Claims.ToList() ?? new List<Claim>();

            await InvokeAsync(StateHasChanged); // Update UI with user info

            if (User == null || !(User.Identity?.IsAuthenticated ?? false))
            {
                AppendStatus("User is NOT authenticated.");
                return;
            }

            try
            {
                Projects = await projectClient.GetProjectsAsync();
                AppendStatus($"{Projects.Count} project(s) loaded successfully.");
                await InvokeAsync(StateHasChanged); // Update UI with projects
            }
            catch (Exception ex)
            {
                AppendStatus($"Error loading projects: {ex.Message} (Type: {ex.GetType().FullName})");
                await InvokeAsync(StateHasChanged);
            }

            try
            {
                var db = redis.GetDatabase();
                var server = redis.GetServer(redis.GetEndPoints().First());
                RedisKeys = server.Keys().Select(k => k.ToString()).ToList();
                RedisEntries = new List<RedisEntry>();
                foreach (var key in RedisKeys)
                {
                    try
                    {
                        var value = await db.StringGetAsync(key);
                        RedisEntries.Add(new RedisEntry
                        {
                            Key = key,
                            Value = value.ToString()
                        });
                    }
                    catch (Exception)
                    {
                        RedisEntries.Add(new RedisEntry
                        {
                            Key = key,
                            Value = "(Unknown Object)"
                        });
                    }
                }
                await InvokeAsync(StateHasChanged); // Update UI with Redis data
            }
            catch (Exception ex)
            {
                AppendStatus($"Redis error: {ex.Message}");
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            AppendStatus($"Initialization error: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AppendStatus(string message)
    {
        if (!string.IsNullOrEmpty(StatusMessage)) StatusMessage += " | ";
        StatusMessage += message;
    }

    public class RedisEntry
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
    }
}