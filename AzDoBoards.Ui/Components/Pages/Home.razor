@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Identity.Client
@using System.Security.Claims
@inject Client.Projects projectClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject StackExchange.Redis.IConnectionMultiplexer Redis

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<p>
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <h3>Status</h3>
        <div>@StatusMessage</div>
    }

    @if (User != null)
    {
        <h3>Authenticated User Information</h3>
        <div>
            <strong>User Identity:</strong> @User.Identity?.Name
            <br />
            <strong>Authenticated:</strong> @(User.Identity?.IsAuthenticated ?? false)
            <br />
            <strong>Claims:</strong>
            <ul>
                @foreach (var claim in User.Claims)
                {
                    <li>@claim.Type: @claim.Value</li>
                }
            </ul>
        </div>
    }

    @if (Projects != null)
    {
        <h3>Projects</h3>
        @foreach (var project in Projects)
        {
            <div>@project</div>
        }
    }

    <h3>Redis Cache</h3>
    @if (RedisKeys != null && RedisKeys.Any())
    {
        <ul>
            @foreach (var key in RedisKeys)
            {
                <li>
                    <strong>@key:</strong> @RedisValues[key]
                </li>
            }
        </ul>
    }
    else
    {
        <div>No Redis keys found.</div>
    }
</p>

@code {
    private string StatusMessage = string.Empty;

    private ClaimsPrincipal? User;
    private IEnumerable<string>? UserClaims;

    private List<string>? Projects;

    private List<string> RedisKeys = new();
    private Dictionary<string, string> RedisValues = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
        UserClaims = User?.Claims.Select(c => $"{c.Type}: {c.Value}");

        if (User == null || !(User.Identity?.IsAuthenticated ?? false))
        {
            AppendStatus("User is NOT authenticated.");
            return;
        }

        try
        {
            Projects = await projectClient.GetProjectsAsync();
            StatusMessage = $"{Projects.Count} project(s) loaded successfully.";
        }
        catch (Exception ex)
        {
            AppendStatus($"Error loading projects: {ex.Message} (Type: {ex.GetType().FullName})");
        }

        try
        {
            var db = Redis.GetDatabase();
            var server = Redis.GetServer(Redis.GetEndPoints().First());
            RedisKeys = server.Keys().Select(k => k.ToString()).ToList();
            foreach (var key in RedisKeys)
            {
                try
                {
                    var value = await db.StringGetAsync(key);
                    RedisValues[key] = value.HasValue ? value.ToString() : "(not a string value)";
                }
                catch (Exception redisEx)
                {
                    RedisValues[key] = $"Error: {redisEx.Message}";
                }
            }
        }
        catch (Exception ex)
        {
            AppendStatus($" Redis error: {ex.Message}");
        }
    }

    private void AppendStatus(string message)
    {
        if (!string.IsNullOrEmpty(StatusMessage))
            StatusMessage += " | ";
        StatusMessage += message;
    }
}