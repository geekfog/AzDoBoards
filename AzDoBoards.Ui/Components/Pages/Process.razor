@page "/process"
@using AzDoBoards.Client.Models
@using AzDoBoards.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject IServiceProvider ServiceProvider

<PageTitle>Process</PageTitle>

<div class="page-content-full-width mt-4">
    <h1>Processes</h1>

    <div>
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">@StatusMessage</MudAlert>
        }

        @if (Processes != null && Processes.Any())
        {
            <MudDataGrid Items="Processes" Filterable="false" QuickFilter="@_quickFilterProcess" SortMode="SortMode.Single">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Process Templates</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" OnClick="RefreshProcessData" Disabled="isLoading">
                        <MudIcon Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" />
                        Refresh
                    </MudButton>
                    <MudTextField @bind-Value="_searchStringProcess" Placeholder="Search Processes" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 ml-3" />
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="Action">
                        <CellTemplate>
                            <MudTooltip Text="View Work Item Types">
                                <MudIconButton Icon="@(Utility.IconSvg.WorkItemTypes)" 
                                             Color="Color.Primary" 
                                             Size="Size.Medium"
                                             OnClick="@(() => ViewWorkItemTypes(context.Item.Id, context.Item.Name))"
                                             Disabled="isLoading" />
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
                    <TemplateColumn Title="Status" Sortable="true" SortBy="@(x => x.IsDefault ? "Default" : (x.IsEnabled ? "Enabled" : "Disabled"))">
                        <CellTemplate>
                            @if (context.Item.IsDefault)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Warning" Size="Size.Small">Default</MudChip>
                            }
                            else if (context.Item.IsEnabled)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Success" Size="Size.Small">Enabled</MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Error" Size="Size.Small">Disabled</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" />
                    <PropertyColumn Property="x => x.ProjectCount" Title="Project Count" Sortable="true" />
                    <TemplateColumn Title="Type" Sortable="true" SortBy="@(x => x.IsSystemProcess ? "System" : "Custom")">
                        <CellTemplate>
                            <MudChip Variant="Variant.Text" Color="@(context.Item.IsSystemProcess? Color.Info: Color.Success)" Size="Size.Small">
                                @(context.Item.IsSystemProcess ? "System" : "Custom")
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.ParentProcessName" Title="Parent" Sortable="true" />
                </Columns>
            </MudDataGrid>
        }
        else
        {
            @if (isLoading)
            {
                <MudStack Row AlignItems="AlignItems.Center" Class="my-4">
                    <MudProgressCircular Indeterminate="true" Size="Size.Small" /> 
                    <MudText Typo="Typo.body2" Class="ml-2">Loading process data...</MudText>
                </MudStack>
            }
            else
            {
                <div>No process data found.</div>
            }
        }
        @if (SelectedProcessWorkItems != null && SelectedProcessWorkItems.Any())
        {
            <div>&nbsp;</div>
            <MudDataGrid Items="SelectedProcessWorkItems" Filterable="false" QuickFilter="@_quickFilterWorkItem" SortMode="SortMode.Single">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Work Item Types for @SelectedProcessName</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchStringWorkItem" Placeholder="Search Work Item Types" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 ml-3" />
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Title="Type" Sortable="true">
                        <CellTemplate>
                            <div style="background-color:#@context.Item.Color; border-radius:5px; padding-left:5px;">@context.Item.Name</div>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Status" Sortable="true">
                        <CellTemplate>
                            @if (context.Item.IsDisabled)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Error" Size="Size.Small">Disabled</MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Success" Size="Size.Small">Enabled</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.ReferenceName" Title="Reference Name" Sortable="true" />
                    <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" />
                </Columns>
            </MudDataGrid>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string StatusMessage = string.Empty;
    private List<ProcessSummary>? Processes;
    private List<WorkItemTypeSummary>? SelectedProcessWorkItems;
    private string SelectedProcessName = string.Empty;

    private string _searchStringProcess = string.Empty;
    private Func<ProcessSummary, bool> _quickFilterProcess => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchStringProcess)) return true;
        if (x.Name.Contains(_searchStringProcess, StringComparison.OrdinalIgnoreCase)) return true;
        if (x.Description.Contains(_searchStringProcess, StringComparison.OrdinalIgnoreCase)) return true;
        if (x.ParentProcessName.Contains(_searchStringProcess, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    };

    private string _searchStringWorkItem = string.Empty;
    private Func<WorkItemTypeSummary, bool> _quickFilterWorkItem => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchStringWorkItem)) return true;
        if (x.Name.Contains(_searchStringWorkItem, StringComparison.OrdinalIgnoreCase)) return true;
        if (x.ReferenceName.Contains(_searchStringWorkItem, StringComparison.OrdinalIgnoreCase)) return true;
        if (x.Description.Contains(_searchStringWorkItem, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    };

    protected override void OnInitialized()
    {
        // Fire and forget - don't await
        _ = Task.Run(async () =>
        {
            try
            {
                await LoadProcessDataAsync();
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task LoadProcessDataAsync()
    {
        try
        {
            // Lazy load services to avoid blocking component creation
            var authProvider = ServiceProvider.GetRequiredService<AuthenticationStateProvider>();
            var processClient = ServiceProvider.GetRequiredService<ProcessServices>();

            var authState = await authProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user == null || !(user.Identity?.IsAuthenticated ?? false))
            {
                AppendStatus("User is NOT authenticated.");
                return;
            }

            try
            {
                Processes = await processClient.GetProcessesAsync();
                var systemProcessCount = Processes.Count(p => p.IsSystemProcess);
                var customProcessCount = Processes.Count(p => !p.IsSystemProcess);
                AppendStatus($"{Processes.Count} process(es) loaded: {systemProcessCount} system, {customProcessCount} custom (cached for efficiency).");
                await InvokeAsync(StateHasChanged); // Update UI with process data
            }
            catch (Exception ex)
            {
                AppendStatus($"Error loading processes: {ex.Message} (Type: {ex.GetType().FullName})");
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            AppendStatus($"Initialization error: {ex.Message}");
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task RefreshProcessData()
    {
        try
        {
            isLoading = true;
            StatusMessage = string.Empty;
            StateHasChanged();

            var processClient = ServiceProvider.GetRequiredService<ProcessServices>();
            processClient.ClearCache(); // Clear the cache to force refresh

            Processes = await processClient.GetProcessesAsync();
            var systemProcessCount = Processes.Count(p => p.IsSystemProcess);
            var customProcessCount = Processes.Count(p => !p.IsSystemProcess);
            AppendStatus($"Refreshed: {Processes.Count} process(es) reloaded from Azure DevOps ({systemProcessCount} system, {customProcessCount} custom).");
        }
        catch (Exception ex)
        {
            AppendStatus($"Error refreshing processes: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ViewWorkItemTypes(Guid processId, string processName)
    {
        try
        {
            isLoading = true;
            SelectedProcessName = processName;
            StateHasChanged();

            var processClient = ServiceProvider.GetRequiredService<ProcessServices>();
            SelectedProcessWorkItems = await processClient.GetWorkItemTypesForProcessAsync(processId);

            AppendStatus($"Loaded {SelectedProcessWorkItems.Count} work item types for process: {processName} (using optimized Process API).");
        }
        catch (Exception ex)
        {
            AppendStatus($"Error loading work item types: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AppendStatus(string message)
    {
        if (!string.IsNullOrEmpty(StatusMessage)) StatusMessage += " | ";
        StatusMessage += message;
    }
}