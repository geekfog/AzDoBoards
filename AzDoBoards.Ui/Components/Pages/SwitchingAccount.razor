@page "/switching-account"
@using MudBlazor
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Switching Account</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex justify-center align-center" Style="min-height: 60vh;">
    <MudCard Class="pa-8 text-center">
        <MudCardContent>
            <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" Class="mb-4" />
            <MudText Typo="Typo.h5" Class="mb-3">Switching Account</MudText>
            <MudText Typo="Typo.body1" Class="mb-4">
                Please wait while we sign you out and prompt for account selection...
            </MudText>
            <MudAlert Severity="Severity.Info">
                <MudText Typo="Typo.body2">
                    You will be redirected to Microsoft's sign-in page where you can choose the correct account.
                </MudText>
            </MudAlert>
        </MudCardContent>
    </MudCard>
</MudContainer>

<!-- Hidden form for performing the actual account switch -->
<form id="account-switch-form" method="post" action="/perform-account-switch" style="display: none;">
    <AntiforgeryToken />
</form>

<script>
    window.submitAccountSwitchForm = () => {
        const form = document.getElementById('account-switch-form');
        if (form) {
            form.submit();
        } else {
            console.error('Account switch form not found');
        }
    };
</script>

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private bool _disposed = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_disposed)
        {
            try
            {
                // Check if component is still active before making JS call
                if (!_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    await JSRuntime.InvokeVoidAsync("submitAccountSwitchForm", _cancellationTokenSource.Token);
                }
            }
            catch (TaskCanceledException)
            {
                // Expected when component is disposed, ignore
            }
            catch (JSDisconnectedException)
            {
                // Expected when Blazor circuit is disconnected, ignore
            }
            catch (Exception ex)
            {
                // Log unexpected errors but don't rethrow to avoid breaking the component
                Console.WriteLine($"Error in account switch: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _disposed = true;
            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource?.Dispose();
        }
    }
}