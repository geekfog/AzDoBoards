@page "/settings"
@using AzDoBoards.Ui.Components.Tabs
@using MudBlazor
@inject ILogger<Settings> Logger

<PageTitle>Settings</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 page-content-full-width">
    <MudText Typo="Typo.h4" GutterBottom="true">Application Settings</MudText>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <MudAlert Severity="Severity.Info" Class="mb-4">@StatusMessage</MudAlert>
    }

    <MudTabs Elevation="2" Rounded="true" Centered="false" Color="Color.Primary" @bind-ActivePanelIndex="activeTabIndex" @bind-ActivePanelIndex:after="OnTabChanged">
        <!-- General Tab -->
        <MudTabPanel Text="General" Icon="@Icons.Material.Filled.Settings">
            <!-- Empty - content moved outside -->
        </MudTabPanel>

        <!-- Process Tab -->
        <MudTabPanel Text="Process" Icon="@Icons.Material.Filled.AccountTree">
            <!-- Empty - content moved outside -->
        </MudTabPanel>

        <!-- States Tab -->
        <MudTabPanel Text="States" Icon="@Icons.Material.Filled.PlaylistPlay">
            <!-- Empty - content moved outside -->
        </MudTabPanel>
    </MudTabs>

    <!-- Tab Content Outside MudTabs - This preserves component state -->
    <div class="pa-4" style="@(activeTabIndex != 0 ? "display: none;" : "")">
        <GeneralSettingsTab @ref="generalSettingsTab" OnStatusMessage="OnStatusMessageReceived" />
    </div>

    <div class="pa-4" style="@(activeTabIndex != 1 ? "display: none;" : "")">
        <ProcessSettingsTab @ref="processSettingsTab" OnStatusMessage="OnStatusMessageReceived" />
    </div>

    <div class="pa-4" style="@(activeTabIndex != 2 ? "display: none;" : "")">
        <StatesSettingsTab @ref="statesSettingsTab" OnStatusMessage="OnStatusMessageReceived" />
    </div>
</MudContainer>

@code {
    private int activeTabIndex = 0;
    private string StatusMessage = string.Empty;

    private GeneralSettingsTab? generalSettingsTab;
    private ProcessSettingsTab? processSettingsTab;
    private StatesSettingsTab? statesSettingsTab;

    private bool generalInitialized = false;
    private bool processInitialized = false;
    private bool statesInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize the first tab (General) after first render
            await InitializeActiveTab();
        }
    }

    private async Task OnTabChanged()
    {
        // This method is called whenever the active tab changes
        await InitializeActiveTab();
    }

    private async Task InitializeActiveTab()
    {
        try
        {
            // Add a small delay to ensure component references are set
            await Task.Delay(50);

            switch (activeTabIndex)
            {
                case 0: // General
                    if (!generalInitialized && generalSettingsTab != null)
                    {
                        await generalSettingsTab.InitializeAsync();
                        generalInitialized = true;
                    }
                    break;

                case 1: // Process
                    if (!processInitialized && processSettingsTab != null)
                    {
                        await processSettingsTab.InitializeAsync();
                        processInitialized = true;
                    }
                    break;

                case 2: // States
                    if (!statesInitialized && statesSettingsTab != null)
                    {
                        await statesSettingsTab.InitializeAsync();
                        statesInitialized = true;
                    }
                    break;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing settings tab {TabIndex}", activeTabIndex);
            StatusMessage = $"Error loading settings: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task OnStatusMessageReceived(string message)
    {
        StatusMessage = message;
        StateHasChanged();

        // Clear status message after 5 seconds
        await InvokeAsync(async () =>
        {
            await Task.Delay(5000);
            if (StatusMessage == message) // Only clear if it's still the same message
            {
                StatusMessage = string.Empty;
                StateHasChanged();
            }
        });
    }
}