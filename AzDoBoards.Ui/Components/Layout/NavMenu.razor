@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Utility.CacheBuster CacheBuster
@inject IJSRuntime JSRuntime

<div id="navbarMain" class="top-row ps-3 navbar navbar-dark">
    <div id="navbarContainer" style="display: flex; align-items: center;">
        <img id="navbarLogo" src="img/favicon-0128.png?v=@CacheBuster.Value" srcset="img/favicon.svg?v=@CacheBuster.Value" />
        <div id="navbarName">
            <a class="navbar-brand nav-brand" href=""><img alt="Application Name" src="img/AzDoBoards.png?v=@CacheBuster.Value" srcset="img/AzDoBoards.svg?v=@CacheBuster.Value" /></a>
        </div>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()" style="height: calc(100vh - var(--navbar-height, 60px)); display: flex; flex-direction: column;">
    <nav class="nav flex-column" style="flex: 1; display: flex; flex-direction: column;">
        <div style="flex: 1;">
            <div class="nav-item px-3"><NavLink class="nav-link" href="" Match="NavLinkMatch.All"><img src="@Icon("NavDashboard")" class="nav-icon" alt="" role="presentation" /> Dashboard </NavLink></div>
            <div class="nav-item px-3"><NavLink class="nav-link" href="roadmap">                  <img src="@Icon("NavRoadmap")"     class="nav-icon" alt="" role="presentation" /> Roadmap   </NavLink></div>
            <div class="nav-item px-3"><NavLink class="nav-link" href="items">                    <img src="@Icon("NavItems")"     class="nav-icon" alt="" role="presentation" /> Work Items</NavLink></div>
            <div class="nav-item px-3"><NavLink class="nav-link" href="settings">                 <img src="@Icon("NavSettings")"  class="nav-icon" alt="" role="presentation" /> Settings  </NavLink></div>
            <div class="nav-item px-3"><NavLink class="nav-link" href="process">                  <img src="@Icon("NavProcess")"   class="nav-icon" alt="" role="presentation" /> Processes </NavLink></div>
        </div>
        
        <div class="nav-item px-3" style="margin-top: auto; padding-bottom: 1rem;">
            <MudMenu>
                <ActivatorContent>
                    <div class="nav-link d-flex align-items-center" style="cursor: pointer;">
                        <MudAvatar Size="Size.Medium" Class="nav-avatar me-2">
                            @if (!string.IsNullOrEmpty(GravatarUrl))
                            {
                                <img id="gravatar" src="@GravatarUrl" alt="@PreferredUserName" />
                            }
                            else
                            {
                                <span>@Initials</span>
                            }
                        </MudAvatar>
                        <span>@Name</span>
                    </div>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="@(() => Navigation.NavigateTo("/about"))">
                        <MudIcon Icon="@(Utility.IconSvg.Info)" Class="me-2" />
                        About
                    </MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="@(() => Navigation.NavigateTo("/switch-account", true))">
                        <MudIcon Icon="@(Utility.IconSvg.SwapUser)" Class="me-2" />
                        Switch Account
                    </MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="HandleSignOut">
                        <MudIcon Icon="@(Utility.IconSvg.Logout)" Class="me-2" />
                        Logout
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        </div>
    </nav>
</div>

<!-- Hidden forms for POST requests -->
<form id="signout-form" method="post" action="/signout" style="display: none;">
    <AntiforgeryToken />
</form>

@code {
    private string? PreferredUserName;
    private string? Email;
    private string? Name;
    private string? GravatarUrl;
    private string? Initials;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        PreferredUserName = user?.Claims.FirstOrDefault(c => c.Type == "preferred_username")?.Value;
        Email = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value;
        GravatarUrl = !string.IsNullOrEmpty(PreferredUserName) ? GetGravatarUrl(PreferredUserName) : null;

        Name = user?.Claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "(Unknown)";
        var givenName = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value;
        var surname = user?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname)?.Value;
      
        if (!string.IsNullOrEmpty(GravatarUrl)) return;

        Initials = !string.IsNullOrEmpty(givenName) || !string.IsNullOrEmpty(surname) ? $"{givenName[0]}{surname[0]}".Trim().ToUpper() : "?";
    }

    private async Task HandleSignOut()
    {
        await JSRuntime.InvokeVoidAsync("document.getElementById('signout-form').submit");
    }

    private string GetGravatarUrl(string email)
    {
        var emailLower = email.Trim().ToLowerInvariant();
        var hash = GetMd5Hash(emailLower);
        return $"https://www.gravatar.com/avatar/{hash}?s=40&d=identicon";
    }

    private static string GetMd5Hash(string input)
    {
        using var md5 = System.Security.Cryptography.MD5.Create();
        var inputBytes = System.Text.Encoding.UTF8.GetBytes(input);
        var hashBytes = md5.ComputeHash(inputBytes);
        return string.Concat(hashBytes.Select(b => b.ToString("x2")));
    }

    private string Icon(string file) => $"img/{file}.svg?v={CacheBuster.Value}";
}